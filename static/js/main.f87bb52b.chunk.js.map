{"version":3,"sources":["utils/createID.ts","store/tasks/reducer.ts","components/Menu.tsx","utils/createEmptyTask.ts","components/ToDoList/Add/Subtask.tsx","components/ToDoList/Add/Task.tsx","components/ToDoList/PercentageComplete.tsx","components/ToDoList/SingleTask.tsx","components/ToDoList/index.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["createID","ID","i","charAt","Math","floor","random","tasksReducer","state","action","newState","type","payload","task","id","dateAdded","Date","subtasks","filter","title","completed","map","subtask","removeByID","list","updateByID","Error","Menu","toggleAddTaskOpen","addNewTaskOpen","onClick","name","className","createEmptyTask","AddSubTask","subtaskInputs","setSubtaskInputs","createEmptySubtask","addMoreSubTasks","length","value","placeholder","onChange","e","s","target","inputHandler","removeSubTask","AddTask","useState","taskInput","setTaskInput","dispatch","useContext","ToDoListDispatch","autoFocus","PercentageComplete","tasksCompleted","taskLength","style","width","SingleTask","isChild","edit","setEdit","input","setInput","reduce","counter","ToDoList","tasks","createContext","initialState","App","setAddNewTaskOpen","useReducer","Provider","href","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f87bb52b.chunk.js","sourcesContent":["const createID = () => {\r\n  let ID = \"\";\r\n  const char = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!#¤%&/()=?@£$€{[]}-.,<>;:_|\";\r\n  for (var i = 0; i < 64; i++) {\r\n    ID += char.charAt(Math.floor(Math.random() * 89));\r\n  }\r\n  return ID;\r\n};\r\n\r\nexport default createID;\r\n","import TasksReducerAction from \"./types\";\r\nimport { TToDo, TToDoList } from \"../../components/ToDoList/types\";\r\nimport createID from \"../../utils/createID\";\r\n\r\nconst tasksReducer = (state: TToDoList, action: TasksReducerAction): TToDoList => {\r\n  let newState = [...state];\r\n\r\n  switch (action.type) {\r\n    case \"ADD\":\r\n      return [\r\n        ...newState,\r\n        {\r\n          ...action.payload.task,\r\n          id: createID(),\r\n          dateAdded: new Date(),\r\n          subtasks: action.payload.task.subtasks.filter((task) => (task.title === \"\" ? false : task)),\r\n        },\r\n      ];\r\n\r\n    case \"CLEAR\":\r\n      return newState\r\n        .filter((task) => !task.completed)\r\n        .map((task) => {\r\n          return {\r\n            ...task,\r\n            subtasks: task.subtasks.filter((subtask) => !subtask.completed),\r\n          };\r\n        });\r\n\r\n    case \"REMOVE\":\r\n      const removeByID = (list: TToDoList, ID: string): TToDoList => {\r\n        return list\r\n          .filter((task) => task.id !== ID)\r\n          .map((task) => {\r\n            return { ...task, subtasks: removeByID(task.subtasks || [], ID) };\r\n          });\r\n      };\r\n\r\n      return removeByID(newState, action.payload.id);\r\n\r\n    case \"UPDATE\":\r\n      const updateByID = (list: TToDoList, payload: TToDo): TToDoList => {\r\n        return list\r\n          .map((task) => {\r\n            if (task.id === payload.id) return payload;\r\n            return task;\r\n          })\r\n          .map((task) => {\r\n            return { ...task, subtasks: updateByID(task.subtasks || [], payload) };\r\n          });\r\n      };\r\n\r\n      return updateByID(newState, action.payload.task);\r\n\r\n    case \"LOAD\":\r\n      if (action.payload === null) return [];\r\n      return action.payload;\r\n\r\n    default:\r\n      throw new Error();\r\n  }\r\n};\r\n\r\nexport default tasksReducer;\r\n","type Props = {\r\n  toggleAddTaskOpen: () => void;\r\n  addNewTaskOpen: boolean;\r\n};\r\n\r\nconst Menu = ({ toggleAddTaskOpen, addNewTaskOpen }: Props) => {\r\n  return (\r\n    <menu>\r\n      <button onClick={toggleAddTaskOpen} name=\"Open Add New Task\">\r\n        {addNewTaskOpen ? <i className=\"fas fa-times\"></i> : <i className=\"fas fa-plus\"></i>}\r\n      </button>\r\n    </menu>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import createID from \"./createID\";\r\nimport { TToDo } from \"../components/ToDoList/types\";\r\n\r\nconst createEmptyTask = (): TToDo => ({\r\n  id: createID(),\r\n  title: \"\",\r\n  dateAdded: new Date(),\r\n  completed: false,\r\n  subtasks: [],\r\n});\r\n\r\nexport default createEmptyTask;\r\n","import { TToDo, TToDoList } from \"../types\";\n\ntype Props = {\n  subtaskInputs: TToDoList;\n  setSubtaskInputs: React.Dispatch<React.SetStateAction<TToDoList>>;\n  createEmptySubtask: () => TToDo;\n};\n\nconst AddSubTask = ({ subtaskInputs, setSubtaskInputs, createEmptySubtask }: Props) => {\n  const inputHandler = (e: React.ChangeEvent<HTMLInputElement>, id: string) => {\n    setSubtaskInputs(\n      subtaskInputs.map((s) => {\n        if (s.id === id) return { ...s, title: e.target.value };\n        return s;\n      })\n    );\n  };\n\n  const addMoreSubTasks = () => setSubtaskInputs([...subtaskInputs, createEmptySubtask()]);\n\n  const removeSubTask = (id: string) => {\n    if (subtaskInputs.length > 1)\n      setSubtaskInputs(\n        subtaskInputs.filter((s) => {\n          if (s.id === id) return false;\n          return s;\n        })\n      );\n    setSubtaskInputs([createEmptySubtask()]);\n  };\n\n  return (\n    <ul className=\"subtask\">\n      {subtaskInputs.length > 0 &&\n        subtaskInputs.map(({ id, title }) => (\n          <li className=\"list--item--name\" key={id}>\n            <input\n              type=\"text\"\n              name=\"subtasks\"\n              value={title}\n              placeholder=\"Add a subtask\"\n              onChange={(e) => inputHandler(e, id)}\n            />\n            <button title=\"Delete\" onClick={() => removeSubTask(id)}>\n              <i className=\"far fa-times-circle\"></i>\n            </button>\n            <button title=\"Add more subtasks\" onClick={addMoreSubTasks}>\n              <i className=\"fas fa-plus-circle\"></i>\n            </button>\n          </li>\n        ))}\n    </ul>\n  );\n};\n\nexport default AddSubTask;\n","import { useContext, useState } from \"react\";\r\nimport { ToDoListDispatch } from \"../../../App\";\r\nimport { TToDo } from \"../types\";\r\nimport createEmptyTask from \"../../../utils/createEmptyTask\";\r\nimport AddSubtask from \"./Subtask\";\r\n\r\ntype Props = {\r\n  toggleAddTaskOpen: () => void;\r\n};\r\n\r\nconst AddTask = ({ toggleAddTaskOpen }: Props) => {\r\n  const [taskInput, setTaskInput] = useState<TToDo>(createEmptyTask());\r\n  const [subtaskInputs, setSubtaskInputs] = useState<TToDo[]>([createEmptyTask()]);\r\n\r\n  const { dispatch } = useContext(ToDoListDispatch);\r\n\r\n  const handleSubmit = () => {\r\n    if (taskInput.title !== \"\")\r\n      dispatch({\r\n        type: \"ADD\",\r\n        payload: { task: { ...taskInput, subtasks: subtaskInputs } },\r\n      });\r\n    setTaskInput(createEmptyTask());\r\n    setSubtaskInputs([createEmptyTask()]);\r\n    toggleAddTaskOpen();\r\n  };\r\n\r\n  const inputHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTaskInput({\r\n      ...taskInput,\r\n      title: e.target.value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <li className=\"list--item add--task\">\r\n      <div className=\"list--item--name\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"title\"\r\n          placeholder=\"Add a task\"\r\n          value={taskInput.title}\r\n          onChange={inputHandler}\r\n          autoFocus\r\n        />\r\n        <button title=\"Save\" onClick={handleSubmit}>\r\n          <i className=\"far fa-check-circle green\" />\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        <AddSubtask\r\n          subtaskInputs={subtaskInputs}\r\n          setSubtaskInputs={setSubtaskInputs}\r\n          createEmptySubtask={createEmptyTask}\r\n        />\r\n      </ul>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default AddTask;\r\n","type Props = {\n  tasksCompleted: number;\n  taskLength: number;\n};\nconst PercentageComplete = ({ tasksCompleted, taskLength }: Props) => {\n  return (\n    <li className=\"progression--wrapper\">\n      <div>\n        {tasksCompleted} of {taskLength} Subtasks Completed.\n      </div>\n\n      <div className=\"progression\">\n        <div className=\"bar\" style={{ width: `${(tasksCompleted / taskLength) * 100}%` }} />\n      </div>\n    </li>\n  );\n};\n\nexport default PercentageComplete;\n","import { useContext, useState } from \"react\";\r\nimport { TToDo, TToDoList } from \"./types\";\r\nimport { ToDoListDispatch } from \"../../App\";\r\nimport createEmptyTask from \"../../utils/createEmptyTask\";\r\nimport PercentageComplete from \"./PercentageComplete\";\r\nimport AddSubtask from \"./Add/Subtask\";\r\n\r\ntype Props = TToDo & { isChild?: boolean };\r\n\r\nconst SingleTask = ({ id, title, dateAdded, completed, subtasks, isChild = false }: Props) => {\r\n  const [edit, setEdit] = useState(false);\r\n  const [input, setInput] = useState(\"\");\r\n  const { dispatch } = useContext(ToDoListDispatch);\r\n  const [subtaskInputs, setSubtaskInputs] = useState<TToDoList>([createEmptyTask()]);\r\n\r\n  const removeTask = () => dispatch({ type: \"REMOVE\", payload: { id } });\r\n\r\n  const saveTaskEdit = () => {\r\n    dispatch({\r\n      type: \"UPDATE\",\r\n      payload: {\r\n        task: {\r\n          id,\r\n          title: input === \"\" ? title : input,\r\n          dateAdded,\r\n          completed,\r\n          subtasks: [...subtasks, ...subtaskInputs.filter((task) => (task.title === \"\" ? false : task))],\r\n        },\r\n      },\r\n    });\r\n    setInput(\"\");\r\n    setEdit(false);\r\n    setSubtaskInputs([createEmptyTask()]);\r\n  };\r\n\r\n  const toggleTaskComplete = () => {\r\n    dispatch({\r\n      type: \"UPDATE\",\r\n      payload: { task: { id, title, dateAdded, completed: !completed, subtasks } },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <li className={`list--item ${completed && \"complete\"}`}>\r\n      <div className=\"list--item--name\">\r\n        {edit ? (\r\n          <input\r\n            type=\"text\"\r\n            name=\"title\"\r\n            placeholder={title}\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            autoFocus\r\n          />\r\n        ) : (\r\n          <p onClick={toggleTaskComplete}>\r\n            <i className={completed ? \"fas fa-check-square\" : \"far fa-square\"} />\r\n            {title}\r\n          </p>\r\n        )}\r\n\r\n        <button onClick={completed ? removeTask : edit ? saveTaskEdit : () => setEdit(true)}>\r\n          <i className={`fas ${completed ? \"fa-trash-alt\" : edit ? \"far fa-check-circle green\" : \"fa-edit\"}`} />\r\n        </button>\r\n      </div>\r\n\r\n      {edit && (\r\n        <AddSubtask\r\n          subtaskInputs={subtaskInputs}\r\n          setSubtaskInputs={setSubtaskInputs}\r\n          createEmptySubtask={createEmptyTask}\r\n        />\r\n      )}\r\n\r\n      {subtasks.length > 0 && (\r\n        <ul className=\"subtask\">\r\n          <PercentageComplete\r\n            tasksCompleted={subtasks.reduce((counter, { completed }) => {\r\n              if (completed === true) return (counter += 1);\r\n              return counter;\r\n            }, 0)}\r\n            taskLength={subtasks.length}\r\n          />\r\n\r\n          {subtasks.map((subtask) => (\r\n            <SingleTask\r\n              key={subtask.id}\r\n              id={subtask.id}\r\n              dateAdded={dateAdded}\r\n              title={subtask.title}\r\n              completed={subtask.completed}\r\n              subtasks={subtask.subtasks}\r\n              isChild={true}\r\n            />\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default SingleTask;\r\n","import AddTask from \"./Add/Task\";\r\nimport SingleTask from \"./SingleTask\";\r\nimport { TToDoList } from \"./types\";\r\n\r\ntype Props = {\r\n  toggleAddTaskOpen: () => void;\r\n  addNewTaskOpen: boolean;\r\n  tasks: TToDoList;\r\n};\r\n\r\nconst ToDoList = ({ toggleAddTaskOpen, addNewTaskOpen, tasks }: Props) => {\r\n  return (\r\n    <ul>\r\n      {addNewTaskOpen && <AddTask toggleAddTaskOpen={toggleAddTaskOpen} />}\r\n\r\n      {tasks.map(({ id, title, dateAdded, completed, subtasks }) => (\r\n        <SingleTask key={id} id={id} title={title} dateAdded={dateAdded} completed={completed} subtasks={subtasks} />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ToDoList;\r\n","import { useState, createContext, useReducer } from \"react\";\r\nimport { TToDoList } from \"./components/ToDoList/types\";\r\nimport TasksReducerAction from \"./store/tasks/types\";\r\nimport tasksReducer from \"./store/tasks/reducer\";\r\nimport Menu from \"./components/Menu\";\r\nimport ToDoList from \"./components/ToDoList\";\r\n\r\ntype ContextModel = {\r\n  state: TToDoList;\r\n  dispatch: React.Dispatch<TasksReducerAction>;\r\n};\r\nexport const ToDoListDispatch = createContext({} as ContextModel);\r\n\r\nconst initialState: TToDoList = [];\r\n\r\nconst App = () => {\r\n  const [addNewTaskOpen, setAddNewTaskOpen] = useState(false);\r\n  const [tasks, dispatch] = useReducer(tasksReducer, initialState);\r\n  const toggleAddTaskOpen = () => setAddNewTaskOpen(!addNewTaskOpen);\r\n\r\n  return (\r\n    <ToDoListDispatch.Provider value={{ state: tasks, dispatch }}>\r\n      <Menu toggleAddTaskOpen={toggleAddTaskOpen} addNewTaskOpen={addNewTaskOpen} />\r\n\r\n      <main>\r\n        <div className=\"title\">\r\n          <h1>To-Do-List</h1>\r\n          <p>\r\n            with subtasks by <a href=\"https://github.com/vlorenzen/\">Viktor Lorenzen</a>\r\n          </p>\r\n        </div>\r\n        <ToDoList addNewTaskOpen={addNewTaskOpen} toggleAddTaskOpen={toggleAddTaskOpen} tasks={tasks} />\r\n      </main>\r\n\r\n      <button className=\"clear--btn\" onClick={() => dispatch({ type: \"CLEAR\" })}>\r\n        Clear All Completed Tasks!\r\n      </button>\r\n    </ToDoListDispatch.Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}